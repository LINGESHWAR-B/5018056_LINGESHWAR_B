CREATE OR REPLACE PACKAGE AccountOperations AS
    PROCEDURE OpenNewAccount(p_account_id NUMBER, p_customer_id NUMBER, p_account_type VARCHAR2, p_balance NUMBER);
    PROCEDURE CloseAccount(p_account_id NUMBER);
    FUNCTION GetTotalBalance(p_customer_id NUMBER) RETURN NUMBER;
END AccountOperations;
/

CREATE OR REPLACE PACKAGE BODY AccountOperations AS

    PROCEDURE OpenNewAccount(p_account_id NUMBER, p_customer_id NUMBER, p_account_type VARCHAR2, p_balance NUMBER) IS
    BEGIN
        INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance, LastModified)
        VALUES (p_account_id, p_customer_id, p_account_type, p_balance, SYSDATE);
        DBMS_OUTPUT.PUT_LINE('Opened new account with ID: ' || p_account_id);
    END OpenNewAccount;

    PROCEDURE CloseAccount(p_account_id NUMBER) IS
    BEGIN
        DELETE FROM Accounts
        WHERE AccountID = p_account_id;
        DBMS_OUTPUT.PUT_LINE('Closed account with ID: ' || p_account_id);
    END CloseAccount;

    FUNCTION GetTotalBalance(p_customer_id NUMBER) RETURN NUMBER IS
        v_total_balance NUMBER;
    BEGIN
        SELECT SUM(Balance) INTO v_total_balance
        FROM Accounts
        WHERE CustomerID = p_customer_id;
        RETURN v_total_balance;
    END GetTotalBalance;

END AccountOperations;
/

BEGIN
    AccountOperations.OpenNewAccount(p_account_id => 3, p_customer_id => 3, p_account_type => 'Checking', p_balance => 2000);

    AccountOperations.CloseAccount(p_account_id => 3);

    DBMS_OUTPUT.PUT_LINE('Total balance for CustomerID 3: ' || AccountOperations.GetTotalBalance(p_customer_id => 3));
END;
/